package provide DS9 1.0

######
# Begin autogenerated taccle (version 1.3) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

namespace eval prism {
    variable yylval {}
    variable table
    variable rules
    variable token {}
    variable yycnt 0
    variable yyerr 0
    variable save_state 0

    namespace export yylex
}

proc prism::YYABORT {} {
    return -code return 1
}

proc prism::YYACCEPT {} {
    return -code return 0
}

proc prism::YYERROR {} {
    variable yyerr
    set yyerr 1
}

proc prism::yyclearin {} {
    variable token
    variable yycnt
    set token {}
    incr yycnt -1
}

proc prism::yyerror {s} {
    puts stderr $s
}

proc prism::setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc prism::unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set prism::table {
  11:265 reduce
  5:0,target 10
  13:265 reduce
  0:266,target 16
  11:0 reduce
  0:265 shift
  5:265,target 11
  0:266 reduce
  0:267 reduce
  2:265 shift
  0:268 shift
  0:265,target 1
  0:269 shift
  0:275,target 6
  12:265,target 17
  0:272 goto
  6:266 shift
  8:265 reduce
  0:274 goto
  6:267 shift
  0:275 goto
  8:265,target 15
  0:274,target 5
  6:267,target 11
  6:277,target 12
  12:0 reduce
  0:0,target 13
  1:267,target 18
  3:265,target 14
  10:0,target 21
  5:273,target 9
  6:277 goto
  6:266,target 10
  10:265,target 21
  1:266,target 18
  8:0,target 15
  1:276,target 7
  3:0 reduce
  11:0,target 20
  10:265 reduce
  0:272,target 4
  12:265 reduce
  13:265,target 19
  13:0 reduce
  12:0,target 17
  1:266 reduce
  0:0 reduce
  1:267 reduce
  3:265 reduce
  9:265,target 14
  7:267,target 11
  5:265 reduce
  7:277,target 13
  0:269,target 3
  4:0 accept
  7:266 shift
  9:265 shift
  3:0,target 14
  7:267 shift
  13:0,target 19
  8:0 reduce
  7:266,target 10
  1:276 goto
  10:0 reduce
  5:273 goto
  11:265,target 20
  0:268,target 2
  14:0 reduce
  4:0,target 0
  7:277 goto
  14:0,target 12
  0:267,target 16
  2:265,target 8
  5:0 reduce
}

array set prism::rules {
  9,l 271
  11,l 273
  15,l 274
  20,l 277
  19,l 274
  2,l 270
  6,l 270
  12,l 272
  16,l 275
  21,l 277
  3,l 270
  7,l 270
  13,l 274
  0,l 278
  17,l 274
  4,l 270
  8,l 271
  10,l 272
  14,l 274
  18,l 276
  1,l 270
  5,l 270
}

array set prism::rules {
  5,dc 1
  0,dc 1
  17,dc 2
  12,dc 3
  8,dc 1
  21,dc 1
  3,dc 1
  15,dc 2
  10,dc 1
  6,dc 1
  18,dc 0
  1,dc 0
  13,dc 0
  9,dc 1
  4,dc 1
  16,dc 0
  11,dc 0
  7,dc 1
  20,dc 1
  19,dc 3
  2,dc 1
  14,dc 1
}

array set prism::rules {
  13,line 56
  7,line 46
  10,line 52
  4,line 43
  18,line 59
  1,line 40
  16,e 0
  15,line 58
  9,line 49
  12,line 53
  6,line 45
  21,line 64
  3,line 42
  17,line 59
  14,line 57
  8,line 48
  11,line 52
  5,line 44
  18,e 1
  20,line 63
  19,line 60
  2,line 41
  16,line 58
  11,e 1
}

array set prism::lr1_table {
  13,trans {}
  0 {{0 0 0} {10 0 0} {12 0 0} {13 {0 265} 0} {14 {0 265} 0} {15 {0 265} 0} {17 {0 265} 0} {19 {0 265} 0} {16 {266 267} 0}}
  14,trans {}
  1 {{19 {0 265} 1} {18 {266 267} 0}}
  2 {{15 {0 265} 1}}
  3 {{14 {0 265} 1}}
  4 {{0 0 1}}
  0,trans {{265 1} {268 2} {269 3} {272 4} {274 5} {275 6}}
  5 {{10 0 1} {12 0 1} {11 265 0}}
  1,trans {{276 7}}
  6 {{17 {0 265} 1} {20 {0 265} 0} {21 {0 265} 0}}
  2,trans {{265 8}}
  3,trans {}
  7 {{19 {0 265} 2} {20 {0 265} 0} {21 {0 265} 0}}
  4,trans {}
  8 {{15 {0 265} 2}}
  10 {{21 {0 265} 1}}
  5,trans {{273 9}}
  9 {{12 0 2}}
  6,trans {{266 10} {267 11} {277 12}}
  11 {{20 {0 265} 1}}
  7,trans {{266 10} {267 11} {277 13}}
  12 {{17 {0 265} 2}}
  8,trans {}
  13 {{19 {0 265} 3}}
  10,trans {}
  9,trans {{265 14}}
  14 {{12 0 3}}
  11,trans {}
  12,trans {}
}

array set prism::token_id_table {
  264,line 15
  270,t 1
  269,t 0
  276,line 59
  265,title string
  274,t 1
  261,line 11
  257,t 0
  270,title {}
  269,title OPEN
  273,line 52
  278,t 1
  257,line 7
  262,t 0
  274,title {}
  270,line 39
  269,line 24
  259,title ON
  260,title OFF
  266,t 0
  278,title {}
  271,t 1
  error error
  264,title float
  266,line 21
  278,line 65
  275,t 1
  error,line 38
  268,title LOAD
  258,t 0
  263,line 14
  error,title {}
  275,line 58
  273,title {}
  263,t 0
  259,line 9
  260,line 10
  258,title NO
  277,title {}
  272,line 51
  267,t 0
  263,title integer
  272,t 1
  268,line 23
  267,title CLOSE
  257 YES_
  276,t 1
  258 NO_
  259,t 0
  259 ON_
  260 OFF_
  260,t 0
  272,title {}
  261 TRUE_
  265,line 17
  262 FALSE_
  263 INT_
  277,line 62
  257,title YES
  264 REAL_
  264,t 0
  276,title {}
  265 STRING_
  262,line 12
  266 CLEAR_
  267 CLOSE_
  0,t 0
  0 {$}
  262,title FALSE
  268 LOAD_
  268,t 0
  274,line 55
  270 yesno
  269 OPEN_
  271 numeric
  error,t 0
  272 command
  258,line 8
  273,t 1
  273 @PSEUDO1
  266,title CLEAR
  274 prism
  275 @PSEUDO2
  271,line 47
  276 @PSEUDO3
  277,t 1
  277 prismCmd
  271,title {}
  278 start'
  261,t 0
  267,line 22
  275,title {}
  265,t 0
  261,title TRUE
}

proc prism::yyparse {} {
    variable yylval
    variable table
    variable rules
    variable token
    variable yycnt
    variable lr1_table
    variable token_id_table
    variable yyerr
    variable save_state

    set yycnt 0
    set state_stack {0}
    set value_stack {{}}
    set token ""
    set accepted 0
    set yyerr 0
    set save_state 0

    while {$accepted == 0} {
        set state [lindex $state_stack end]
        if {$token == ""} {
            set yylval ""
            set token [yylex]
            set buflval $yylval
	    if {$token>0} {
	        incr yycnt
            }
        }
        if {![info exists table($state:$token)] || $yyerr} {
	    if {!$yyerr} {
	        set save_state $state
	    }
            # pop off states until error token accepted
            while {[llength $state_stack] > 0 && \
                       ![info exists table($state:error)]} {
                set state_stack [lrange $state_stack 0 end-1]
                set value_stack [lrange $value_stack 0 \
                                       [expr {[llength $state_stack] - 1}]]
                set state [lindex $state_stack end]
            }
            if {[llength $state_stack] == 0} {
 
	        set rr { }
                if {[info exists lr1_table($save_state,trans)] && [llength $lr1_table($save_state,trans)] >= 1} {
                    foreach trans $lr1_table($save_state,trans) {
                        foreach {tok_id nextstate} $trans {
			    set ss $token_id_table($tok_id,title)
			    if {$ss != {}} {
			        append rr "$ss, "
                            }
                        }
                    }
                }
		set rr [string trimleft $rr { }]
		set rr [string trimright $rr {, }]
                yyerror "parse error, expecting: $rr"


                return 1
            }
            lappend state_stack [set state $table($state:error,target)]
            lappend value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists table($state:$token)]} {
                if {$token == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set yylval {}
                set token [yylex]
                set buflval $yylval
            }
            continue
        }
        switch -- $table($state:$token) {
            shift {
                lappend state_stack $table($state:$token,target)
                lappend value_stack $buflval
                set token ""
            }
            reduce {
                set rule $table($state:$token,target)
                set ll $rules($rule,l)
                if {[info exists rules($rule,e)]} {
                    set dc $rules($rule,e)
                } else {
                    set dc $rules($rule,dc)
                }
                set stackpointer [expr {[llength $state_stack]-$dc}]
                setupvalues $value_stack $stackpointer $dc
                set _ $1
                set yylval [lindex $value_stack end]
                switch -- $rule {
                    1 { set _ 1 }
                    2 { set _ 1 }
                    3 { set _ 1 }
                    4 { set _ 1 }
                    5 { set _ 0 }
                    6 { set _ 0 }
                    7 { set _ 0 }
                    8 { set _ $1 }
                    9 { set _ $1 }
                    11 { global ds9; if {!$ds9(init)} {YYERROR} else {yyclearin; YYACCEPT} }
                    13 { PrismDialog prism }
                    14 { PrismDialog prism }
                    15 { PrismCmdLoad $2 }
                    16 { if {![PrismCmdCheck]} {plot::YYABORT} }
                    18 { if {![PrismCmdRef $1]} {plot::YYABORT} }
                    20 { ProcessCmdCVAR0 PrismDestroy }
                    21 { ProcessCmdCVAR0 PrismClear }
                }
                unsetupvalues $dc
                # pop off tokens from the stack if normal rule
                if {![info exists rules($rule,e)]} {
                    incr stackpointer -1
                    set state_stack [lrange $state_stack 0 $stackpointer]
                    set value_stack [lrange $value_stack 0 $stackpointer]
                }
                # now do the goto transition
                lappend state_stack $table([lindex $state_stack end]:$ll,target)
                lappend value_stack $_
            }
            accept {
                set accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $table($state:$token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

proc prism::yyerror {msg} {
     variable yycnt
     variable yy_current_buffer
     variable index_

     ParserError $msg $yycnt $yy_current_buffer $index_
}
